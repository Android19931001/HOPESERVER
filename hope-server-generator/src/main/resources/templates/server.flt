package ${packageName}.${tabChFileName}.resource;


import com.server.service.contant.Contants;
import com.server.service.base.BaseNoResp;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import ${packageName}.${tabChFileName}.domain.${tableChName}Entity;
import ${packageName}.${tabChFileName}.service.impl.${tableChName}ServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.test.annotation.Timed;
import org.springframework.web.bind.annotation.*;
import com.server.service.utils.Result;


/**
 * @author ${author}
 */
@RestController
@RequestMapping("/api")
public class ${tableChName}Resource {

    private Logger logger = LoggerFactory.getLogger(${tableChName}Resource.class);

    @Autowired
    ${tableChName}ServiceImpl ${tabChFileName}Service;


    /**
         * 分页查询
         *
         * @param ${tabChFileName}Entity
         * @param page
         * @return
         */
        @Timed(millis = Contants.TIME_PRIOD)
        @GetMapping("/${tabChFileName}/query${tableChName}List")
        public ResponseEntity<Page<${tableChName}Entity>> query${tableChName}List(${tableChName}Entity ${tabChFileName}Entity, Page<${tableChName}Entity> page) {
            logger.info("${tableChName}Entity query query${tableChName}List() [ /${tabChFileName}/queryList]\nentity = {} \npage = {current = {},size = {}}", ${tabChFileName}Entity, page.getCurrent(), page.getSize());
            page = (Page<${tableChName}Entity>) ${tabChFileName}Service.page(page, new QueryWrapper<>());
            return ResponseEntity.ok().body(page);
        }


        /**
         * 分页查询（模糊查询）
         *
         * @param ${tabChFileName}Entity
         * @param page
         * @return
         */
        @Timed(millis = Contants.TIME_PRIOD)
        @GetMapping("/${tabChFileName}/queryListByLike")
        public ResponseEntity<Page<${tableChName}Entity>> queryListByLike(${tableChName}Entity ${tabChFileName}Entity, Page<${tableChName}Entity> page) {
            logger.info("${tableChName}Entity query query${tableChName}List() [ /${tabChFileName}/queryList]\nentity = {} \npage = {current = {},size = {}}", ${tabChFileName}Entity, page.getCurrent(), page.getSize());
            QueryWrapper<${tableChName}Entity> queryWrapper = new QueryWrapper<>();
            //模糊查询
            //if (!StringUtils.isEmpty(${tabChFileName}Entity.getAppName())) {
            //    queryWrapper.like("查询字段", ${tabChFileName}Entity.getAppName());
            //    longUpdateInfoEntity.setAppName(null);
            //}
            //精准查询
            //if (StringUtils.isNotBlank(${tabChFileName}Entity.getAppName())) {
            //    queryWrapper.eq("查询字段", ${tabChFileName}Entity.getAppName());
            //    longUpdateInfoEntity.setVerName(null);
            //}
            page = (Page<${tableChName}Entity>) ${tabChFileName}Service.page(page,queryWrapper);

            return ResponseEntity.ok().body(page);
        }

    /**
     * 根据id查询（查）
     *
     * @param id
     * @return
     */
    @Timed(millis = Contants.TIME_PRIOD)
    @GetMapping("/${tabChFileName}/select/{id}")
    public ResponseEntity<${tableChName}Entity> select${tableChName}ById(@PathVariable String id) {
        logger.info("查询的Id === {}", id);
        ${tableChName}Entity ${tabChFileName}Entity = ${tabChFileName}Service.getById(id);
        return ResponseEntity.ok().body(${tabChFileName}Entity);
    }

    /**
     * 删除操作（删）
     *
     * @param id
     * @return
     */
    @Timed(millis = Contants.TIME_PRIOD)
    @DeleteMapping("/${tabChFileName}/remove/{id}")
    public BaseNoResp<Boolean> remove${tableChName}ById(@PathVariable String id) {
        logger.info("删除操作id === {}", id);
        return Result.noBody(${tabChFileName}Service.removeById(id));
    }

    /**
     * 插入数据（增）（改）
     *
     * @param ${tabChFileName}Entity
     * @return
     */
    @Timed(millis = Contants.TIME_PRIOD)
    @PostMapping("/${tabChFileName}/saveOrUpdate")
    public ResponseEntity<${tableChName}Entity> save${tableChName}(@RequestBody ${tableChName}Entity ${tabChFileName}Entity) {
        logger.info("添加操作 === {}", ${tabChFileName}Entity);
        ${tabChFileName}Service.saveOrUpdate(${tabChFileName}Entity);
        return ResponseEntity.ok().body(${tabChFileName}Entity);
    }


}